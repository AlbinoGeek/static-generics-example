// This file was automatically generated by genny.
// Any changes will be lost if this file is regenerated.
// see https://github.com/cheekybits/genny

package main

import "errors"

type StringList struct {
	s []string
}

func NewStringList() *StringList {
	return &StringList{s: []string{}}
}

func (c *StringList) Append(val string) {
	c.s = append(c.s, val)
}

func (c *StringList) Prepend(val string) {
	c.s = append([]string{val}, c.s...)
}

func (c *StringList) Remove(val string) {
	for i, v := range c.s {
		if v == val {
			c.s = append(c.s[:i], c.s[i+1:]...)
			return
		}
	}
}

func (c *StringList) Get(i int) (val string, err error) {
	if i < len(c.s) {
		val = c.s[i]
	} else {
		err = errors.New("index out of bounds")
	}

	return
}

func (c *StringList) Set(idx int, val string) (err error) {
	if idx < len(c.s) {
		c.s[idx] = val
	} else {
		err = errors.New("index out of bounds")
	}

	return
}

type IntList struct {
	s []int
}

func NewIntList() *IntList {
	return &IntList{s: []int{}}
}

func (c *IntList) Append(val int) {
	c.s = append(c.s, val)
}

func (c *IntList) Prepend(val int) {
	c.s = append([]int{val}, c.s...)
}

func (c *IntList) Remove(val int) {
	for i, v := range c.s {
		if v == val {
			c.s = append(c.s[:i], c.s[i+1:]...)
			return
		}
	}
}

func (c *IntList) Get(i int) (val int, err error) {
	if i < len(c.s) {
		val = c.s[i]
	} else {
		err = errors.New("index out of bounds")
	}

	return
}

func (c *IntList) Set(idx int, val int) (err error) {
	if idx < len(c.s) {
		c.s[idx] = val
	} else {
		err = errors.New("index out of bounds")
	}

	return
}

type Int32List struct {
	s []int32
}

func NewInt32List() *Int32List {
	return &Int32List{s: []int32{}}
}

func (c *Int32List) Append(val int32) {
	c.s = append(c.s, val)
}

func (c *Int32List) Prepend(val int32) {
	c.s = append([]int32{val}, c.s...)
}

func (c *Int32List) Remove(val int32) {
	for i, v := range c.s {
		if v == val {
			c.s = append(c.s[:i], c.s[i+1:]...)
			return
		}
	}
}

func (c *Int32List) Get(i int) (val int32, err error) {
	if i < len(c.s) {
		val = c.s[i]
	} else {
		err = errors.New("index out of bounds")
	}

	return
}

func (c *Int32List) Set(idx int, val int32) (err error) {
	if idx < len(c.s) {
		c.s[idx] = val
	} else {
		err = errors.New("index out of bounds")
	}

	return
}

type Int64List struct {
	s []int64
}

func NewInt64List() *Int64List {
	return &Int64List{s: []int64{}}
}

func (c *Int64List) Append(val int64) {
	c.s = append(c.s, val)
}

func (c *Int64List) Prepend(val int64) {
	c.s = append([]int64{val}, c.s...)
}

func (c *Int64List) Remove(val int64) {
	for i, v := range c.s {
		if v == val {
			c.s = append(c.s[:i], c.s[i+1:]...)
			return
		}
	}
}

func (c *Int64List) Get(i int) (val int64, err error) {
	if i < len(c.s) {
		val = c.s[i]
	} else {
		err = errors.New("index out of bounds")
	}

	return
}

func (c *Int64List) Set(idx int, val int64) (err error) {
	if idx < len(c.s) {
		c.s[idx] = val
	} else {
		err = errors.New("index out of bounds")
	}

	return
}

type BoolList struct {
	s []bool
}

func NewBoolList() *BoolList {
	return &BoolList{s: []bool{}}
}

func (c *BoolList) Append(val bool) {
	c.s = append(c.s, val)
}

func (c *BoolList) Prepend(val bool) {
	c.s = append([]bool{val}, c.s...)
}

func (c *BoolList) Remove(val bool) {
	for i, v := range c.s {
		if v == val {
			c.s = append(c.s[:i], c.s[i+1:]...)
			return
		}
	}
}

func (c *BoolList) Get(i int) (val bool, err error) {
	if i < len(c.s) {
		val = c.s[i]
	} else {
		err = errors.New("index out of bounds")
	}

	return
}

func (c *BoolList) Set(idx int, val bool) (err error) {
	if idx < len(c.s) {
		c.s[idx] = val
	} else {
		err = errors.New("index out of bounds")
	}

	return
}
