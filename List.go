// This file was automatically generated by genny.
// Any changes will be lost if this file is regenerated.
// see https://github.com/cheekybits/genny

package main

import (
	"testing"

	"gopkg.in/go-playground/assert.v1"
)

type StringList struct {
	s []string
}

func NewStringList() *StringList {
	return &StringList{s: []string{}}
}

func (c *StringList) Add(val string) {
	c.s = append(c.s, val)
}

func (c *StringList) Remove(val string) {
	for i, v := range c.s {
		if v == val {
			c.s = append(c.s[:i], c.s[i+1:]...)
			return
		}
	}
}

func (c *StringList) Get(i int) (v string) {
	if i < len(c.s) {
		v = c.s[i]
	}

	return
}

func (c *StringList) Set(i int, v string) {
	c.s[i] = v
}

func TestStringList(t *testing.T) {
	l := NewStringList()
	var v string

	l.Add(v)
	assert.Equal(t, v, l.Get(0))

	l.Set(0, v)
	assert.Equal(t, v, l.Get(0))

	l.Remove(v)
	assert.Equal(t, "", l.Get(0))
}

type IntList struct {
	s []int
}

func NewIntList() *IntList {
	return &IntList{s: []int{}}
}

func (c *IntList) Add(val int) {
	c.s = append(c.s, val)
}

func (c *IntList) Remove(val int) {
	for i, v := range c.s {
		if v == val {
			c.s = append(c.s[:i], c.s[i+1:]...)
			return
		}
	}
}

func (c *IntList) Get(i int) (v int) {
	if i < len(c.s) {
		v = c.s[i]
	}

	return
}

func (c *IntList) Set(i int, v int) {
	c.s[i] = v
}

func TestIntList(t *testing.T) {
	l := NewIntList()
	var v int

	l.Add(v)
	assert.Equal(t, v, l.Get(0))

	l.Set(0, v)
	assert.Equal(t, v, l.Get(0))

	l.Remove(v)
	assert.Equal(t, "", l.Get(0))
}

type Int32List struct {
	s []int32
}

func NewInt32List() *Int32List {
	return &Int32List{s: []int32{}}
}

func (c *Int32List) Add(val int32) {
	c.s = append(c.s, val)
}

func (c *Int32List) Remove(val int32) {
	for i, v := range c.s {
		if v == val {
			c.s = append(c.s[:i], c.s[i+1:]...)
			return
		}
	}
}

func (c *Int32List) Get(i int) (v int32) {
	if i < len(c.s) {
		v = c.s[i]
	}

	return
}

func (c *Int32List) Set(i int, v int32) {
	c.s[i] = v
}

func TestInt32List(t *testing.T) {
	l := NewInt32List()
	var v int32

	l.Add(v)
	assert.Equal(t, v, l.Get(0))

	l.Set(0, v)
	assert.Equal(t, v, l.Get(0))

	l.Remove(v)
	assert.Equal(t, "", l.Get(0))
}

type Int64List struct {
	s []int64
}

func NewInt64List() *Int64List {
	return &Int64List{s: []int64{}}
}

func (c *Int64List) Add(val int64) {
	c.s = append(c.s, val)
}

func (c *Int64List) Remove(val int64) {
	for i, v := range c.s {
		if v == val {
			c.s = append(c.s[:i], c.s[i+1:]...)
			return
		}
	}
}

func (c *Int64List) Get(i int) (v int64) {
	if i < len(c.s) {
		v = c.s[i]
	}

	return
}

func (c *Int64List) Set(i int, v int64) {
	c.s[i] = v
}

func TestInt64List(t *testing.T) {
	l := NewInt64List()
	var v int64

	l.Add(v)
	assert.Equal(t, v, l.Get(0))

	l.Set(0, v)
	assert.Equal(t, v, l.Get(0))

	l.Remove(v)
	assert.Equal(t, "", l.Get(0))
}

type BoolList struct {
	s []bool
}

func NewBoolList() *BoolList {
	return &BoolList{s: []bool{}}
}

func (c *BoolList) Add(val bool) {
	c.s = append(c.s, val)
}

func (c *BoolList) Remove(val bool) {
	for i, v := range c.s {
		if v == val {
			c.s = append(c.s[:i], c.s[i+1:]...)
			return
		}
	}
}

func (c *BoolList) Get(i int) (v bool) {
	if i < len(c.s) {
		v = c.s[i]
	}

	return
}

func (c *BoolList) Set(i int, v bool) {
	c.s[i] = v
}

func TestBoolList(t *testing.T) {
	l := NewBoolList()
	var v bool

	l.Add(v)
	assert.Equal(t, v, l.Get(0))

	l.Set(0, v)
	assert.Equal(t, v, l.Get(0))

	l.Remove(v)
	assert.Equal(t, "", l.Get(0))
}
